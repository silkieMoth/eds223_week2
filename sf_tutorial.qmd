---
title: "EDS 223: week 2"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
rm(list = ls())
```

```{r}

library(sf)
library(tidyverse)
library(spData)
library(tmap)
```

```{r}
london_point <- st_point(c(0.1, 51.5))

london_geom <- st_sfc(london_point, crs = 4326)

london_attrib <- data.frame(
  name = "london",
  temperature = 25,
  date = as.Date("2017-06-21")
)

london_sf <- st_sf(london_attrib, geometry = london_geom)

class(london_sf)

st_crs(london_sf)$IsGeographic

```

```{r}

world <- spData::world

names(world)

summary(world$lifeExp)
```

cant remove geom attribute with select alone
sf purposely made it very difficult to remove

```{r}
# wont work
world_df <- world %>% select(-geom)

world_df <- world %>% select(continent)



```
can remove geom like this

```{r}
world_df <- st_drop_geometry(world)

class(world_df)
```

## reprojecting data

```{r}
london_proj <- data.frame(x = 53000, y = 180000) %>%
  st_as_sf(coords = c("x","y"), crs = "EPSG:27700")

st_crs(london_proj) == st_crs(london_sf)


london_sf_transform <- st_transform(london_sf, crs = st_crs(london_proj))
```

```{r}
if(st_crs(london_sf_transform) == st_crs(london_proj)) {
  print("coordinate reference systems of datasets match")
} else {
  error("coordinate reference systems do not patch")
}
```

```{r}
tm_shape(world, projection = 8857) +
  tm_fill(col = "area_km2")
```

```{r}
tm_shape(world, projection = 3395) +
  tm_fill(col = "area_km2")

```

```{r}
world %>%
  select(name_long, pop)

world %>%
  select(-subregion)

world %>%
  select(name = name_long, population = pop)
```

```{r}
world1 <- world %>%
  filter(area_km2 < 10000)
```

```{r}
world %>%
  filter(continent == "Asia") %>% 
  select(name_long, continent, lifeExp) %>%
  slice_max(lifeExp) %>%
  st_drop_geometry()
```

```{r}
world %>%
  group_by(continent) %>%
  summarize(population = sum(pop, na.rm = TRUE)) %>%
  st_drop_geometry()
```

# joins with vector attributes

```{r}
coffee_data <- spData::coffee_data

nrow(coffee_data)
nrow(world)
```

```{r}
world_coffee <- left_join(world, coffee_data, by = "name_long")

```

```{r}
tm_shape(world_coffee) +
  tm_fill(col = "coffee_production_2017")

```





```{r}
world_coffee_inner <- inner_join(world, coffee_data, by = "name_long")

if(nrow(world_coffee_inner) < nrow(coffee_data)) {
  warning("inner join does not match original data. potential data loss during join")
}
```

```{r}
setdiff(coffee_data$name_long, world$name_long)
```


```{r}
drc <- stringr::str_subset(world$name_long, "Dem*.+Congo")

coffee_data$name_long[stringr::str_detect(coffee_data$name_long, "Congo")] <- drc
```

```{r}
world_coffee_inner <- inner_join(world, coffee_data , by = "name_long")

# update warning message conditional to include the mismatch for "others"
if (nrow(world_coffee_inner) != nrow(coffee_data) & setdiff(coffee_data$name_long, world_coffee_inner$name_long) != "Others") {
  warning("inner join does not match original data. potential data loss during join")
}
```



```{r}
tm_shape(world_coffee_inner) +
  tm_polygons(fill = "coffee_production_2017",
              title = "Coffee production (2017)") +
  tm_layout(legend.outside = TRUE)
```

